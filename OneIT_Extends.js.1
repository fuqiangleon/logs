/**
 * OneIT Extends for setting the properties on cells
 * 
 * jQuery, json2 are required.
 * 
 * @Author Shilz
 * 
 */

OneIT_Extends = function(formId, submitUrl) {
	this.formId = formId;
	this.submitUrl = submitUrl;
	this.myForm = null;
}

OneIT_Extends.prototype.getFormId = function() {return this.formId;}
OneIT_Extends.prototype.getMyForm = function() {return this.myForm;}
OneIT_Extends.prototype.rootExtendAttributeNames = ['comments'];
OneIT_Extends.prototype.cellExtendAttributeNames 
	= ['category', 
	   'resource_id', 'instance_id', 'sub_instance_id', 'metric_id',
	   'netflow_profile_id', 'netflow_rule_id', 'netflow_metric_id', 
	   'log_profile_id', 'log_metric_id',
	   'service_id'];

/**
 * json string to object
 */
OneIT_Extends.prototype.parseJSON = function(str) { return JSON.parse(str) ;};
/**
 * object to json string
 */
OneIT_Extends.prototype.stringify = function(obj) { return JSON.stringify(obj) ;};

/**
 * First method to call after constructing.
 */
OneIT_Extends.prototype.init = function() {
	this.myForm = document.createElement('form');
	this.myForm.setAttribute('id', this.formId);
	
	this.addSelect('category',
		[{ label: "资源", value: "resource" },
		{ label: "子资源", value: "subresource" },
		{ label: "流量", value: "netflow" },
		{ label: "日志", value: "log" },
		{ label: "业务服务", value: "service" }]);
}	
/**
 * Get the attributes and dispay them on the EditData page.
 */
OneIT_Extends.prototype.setAttributes = function (attributes) {
	if (attributes.hasAttribute('category')) {
		var category_value = attributes.getAttribute('category');
		$('#category').val(category_value);
		var myThis = this;

		myThis.triggerSelect('category', function () {
			if (category_value == 'resource') {
				if (attributes.hasAttribute('resource_id')) {
					var resource_id_value = attributes.getAttribute('resource_id');
					$('#resource_id').val(resource_id_value);

					myThis.triggerSelect('resource_id', function () {
						if (attributes.hasAttribute('instance_id')) {
							var instance_id_value = attributes.getAttribute('instance_id');
							$('#instance_id').val(instance_id_value);

							myThis.triggerSelect('instance_id', function () {
								if (attributes.hasAttribute('metric_id')) {
									var metric_id_value = attributes.getAttribute('metric_id');
									$('#metric_id').val(metric_id_value);
									myThis.triggerSelect('metric_id');
								}
							});
						}
					});
				}
			} else if (category_value == 'subresource') {
				if (attributes.hasAttribute('resource_id')) {
					var resource_id_value = attributes.getAttribute('resource_id');
					$('#resource_id').val(resource_id_value);

					myThis.triggerSelect('resource_id', function () {
						if (attributes.hasAttribute('instance_id')) {
							var instance_id_value = attributes.getAttribute('instance_id');
							$('#instance_id').val(instance_id_value);

							myThis.triggerSelect('instance_id', function () {
								if (attributes.hasAttribute('sub_instance_id')) {
									var sub_instance_id_value = attributes.getAttribute('sub_instance_id');
									$('#sub_instance_id').val(sub_instance_id_value);
									myThis.triggerSelect('sub_instance_id', function () {
										if (attributes.hasAttribute('metric_id')) {
											var metric_id_value = attributes.getAttribute('metric_id');
											$('#metric_id').val(metric_id_value);
											myThis.triggerSelect('metric_id');
										}
									});
								}
							});
						}
					});
				}
			}
			else if (category_value == 'netflow') {
				if (attributes.hasAttribute('netflow_profile_id')) {
					var netflow_profile_id_value = attributes.getAttribute('netflow_profile_id');
					$('#netflow_profile_id').val(netflow_profile_id_value);

					myThis.triggerSelect('netflow_profile_id', function () {
						if (attributes.hasAttribute('netflow_rule_id')) {
							var netflow_rule_id_value = attributes.getAttribute('netflow_rule_id');
							$('#netflow_rule_id').val(netflow_rule_id_value);

							myThis.triggerSelect('netflow_rule_id', function () {
								if (attributes.hasAttribute('netflow_metric_id')) {
									var netflow_metric_id_value = attributes.getAttribute('netflow_metric_id');
									$('#netflow_metric_id').val(netflow_metric_id_value);
									myThis.triggerSelect('netflow_metric_id');
								}
							});
						}
					});
				}
			} else if (category_value == 'log') {
				if (attributes.hasAttribute('log_profile_id')) {
					var log_profile_id_value = attributes.getAttribute('log_profile_id');
					$('#log_profile_id').val(log_profile_id_value);

					myThis.triggerSelect('log_profile_id', function () {
						if (attributes.hasAttribute('log_metric_id')) {
							var log_metric_id_value = attributes.getAttribute('log_metric_id');
							$('#log_metric_id').val(log_metric_id_value);
							myThis.triggerSelect('log_metric_id');
						}
					});
				}
			} else if (category_value == 'service') {
				if (attributes.hasAttribute('service_id')) {
					var service_id = attributes.getAttribute('service_id');
					$('#service_id').val(service_id);
				}
			}
		});
	}
}
/**
 * Get the properites set result.
 */
OneIT_Extends.prototype.getResult = function () {
	var result = [];

	this.cellExtendAttributeNames.forEach(function (e, index, attr) {
		if ($('#' + e).length > 0) {
			result.push({
				name: e,
				value: $('#' + e).val() || ''
			});
		}
	});

	return result;
}

OneIT_Extends.prototype.getCellAttributeNames = function() {
	return this.cellExtendAttributeNames;
}

OneIT_Extends.prototype.getRootAttributeNames = function() {
	return this.rootExtendAttributeNames;
}

/**
 * Add a select to current form.
 */
OneIT_Extends.prototype.addSelect = function(elementId, childrens) {
	var select = document.createElement('select');
	select.setAttribute('id', elementId);
	select.setAttribute('name', elementId);
	select.setAttribute('class', 'form-control m-b-10');
	select.setAttribute('onchange', 'myExtend.triggerSelect("'+ elementId +'")')
	
	this.addOption(select, '--请选择--', '');
	
	var myThis = this;

	childrens.forEach(function(e, index, attr) {
		myThis.addOption(select, e.label, e.value);
	});
	
	this.myForm.appendChild(select);
}
/**
 * Add an option to given select
 */
OneIT_Extends.prototype.addOption = function(select, label, value) {
	var option = document.createElement('option');
	option.setAttribute('value', value);
	
	var text = document.createTextNode(label);
	option.appendChild(text);
	
	select.appendChild(option);
}
/**
 * from given select.
 */
OneIT_Extends.prototype.removeSelect = function(elementId) {
	$('#'+elementId).remove();
}


/**
 * call this when select is activate.
 */
OneIT_Extends.prototype.triggerSelect = function(elementId, fn) {
	//no need to process leaf
	if (elementId == 'metric_id' || elementId == 'netflow_metric_id' 
	     || elementId == 'log_metric_id' || elementId == 'service_id') {
		return;
	}
	
	var elementValue = $('#'+elementId).val();
	//if user selected empty, then no need to query server.
	if (elementValue == '') {
		this.onDataResponse('[]', elementId);
		return;
	}
 
	var mythis = this;
	$.ajax({
		type : 'POST',
		url  : this.submitUrl + '?elementId='+elementId,
		data : $('#'+this.formId).serialize(),
		async: true,
		error: function(request) { },
		success : function (data) {
			mythis.onDataResponse(data, elementId);
			if (fn != null) {
				fn(); // call if you pass
			}
		}
	});
}

/**
 * when selecting on the elementId and getting data back from remote server.
 */
OneIT_Extends.prototype.onDataResponse = function(data, elementId) {
	var childrens = this.parseJSON(data) || [];
	var elementValue = $('#'+elementId).val();

	var myThis = this;

	if (elementId == 'category') {
		this.cellExtendAttributeNames.forEach(function (e, index, attr) {
			if (e != elementId) {
				myThis.removeSelect(e);
			}
		});
		if (elementValue == 'resource' || elementValue == 'subresource') {
			this.addSelect('resource_id', childrens);
		}
		else if (elementValue == 'netflow') {
			this.addSelect('netflow_profile_id', childrens);
		}
		else if (elementValue == 'log') {
			this.addSelect('log_profile_id', childrens);
		}
		else if (elementValue == 'service') {
			this.addSelect('service_id', childrens);
		}
	} else if (elementId == 'resource_id') {
		['instance_id','sub_instance_id', 'metric_id'].forEach(function(val) { 
			myThis.removeSelect(val);
		});
		this.addSelect('instance_id', childrens);
	} else if (elementId == 'instance_id') {
		['sub_instance_id', 'metric_id'].forEach(function(val) { 
			myThis.removeSelect(val);
		});
		if ($('#category').val() == 'subresource') {
			this.addSelect('sub_instance_id', childrens);
		} 
		else {
			this.addSelect('metric_id', childrens);
		}
	} else if (elementId == 'sub_instance_id') {
		['metric_id'].forEach(function(val) { 
			myThis.removeSelect(val);
		});
		
		this.addSelect('metric_id', childrens);	
	} else if (elementId == 'metric_id') {
		//do nothing
	} 
	
	else if (elementId == 'netflow_profile_id') {
		['netflow_rule_id', 'netflow_metric_id'].forEach(function(val) { 
			myThis.removeSelect(val);
		});
		this.addSelect('netflow_rule_id', childrens);
	} else if (elementId == 'netflow_rule_id') {
		['netflow_metric_id'].forEach(function(val) { 
			myThis.removeSelect(val);
		});
		this.addSelect('netflow_metric_id', childrens);
	} else if (elementId == 'netflow_metric_id') {
		//do nothing
	} 
	
	else if (elementId == 'log_profile_id') {
		['log_metric_id'].forEach(function(val) { 
			myThis.removeSelect(val);
		});
		this.addSelect('log_metric_id', childrens);
	} else if (elementId == 'log_metric_id') {
		//do nothing
	}

	else if (elementId == 'service_id') {
		//do nothing
	}
}

/**
 * @author shilz
 * function to call when user double clicks on a cell.
 */
function cell_dblClick(cell) {
	if (cell == null || cell.value == null || !mxUtils.isNode(cell.value)) {
		return;
	}
	//open different windows depends on category.
	var category = cell.getAttribute('category');
	if (category == 'resource' || category == 'subresource') {
		var instance_id = cell.getAttribute('instance_id');
		if (instance_id && instance_id.length > 0) {
			window.open('/Resource/resource_info/ins_id/'+instance_id);
		}
	} else if(category == 'netflow') {
		var netflow_profile_id = cell.getAttribute('netflow_profile_id');
		var netflow_rule_id = cell.getAttribute('netflow_rule_id'); 
		if (netflow_profile_id && netflow_profile_id.length >0 
			&& netflow_rule_id && netflow_rule_id.length >0) {
			window.open('/Flow/flow_detail/profile/in/ruleId/'+netflow_rule_id+'/profileId/'+netflow_profile_id);
		}
	} else if(category == 'log') {
		var log_profile_id = cell.getAttribute('log_profile_id');
		var log_metric_id = cell.getAttribute('log_metric_id');
		if (log_profile_id && log_profile_id.length >0
			&& log_metric_id && log_metric_id.length >0) {
				window.open('/Log/log_detail/ruleId/'+log_metric_id+'/profileId/'+log_profile_id)
		}
	} else {
		var link = cell.getAttribute('link');
		if (link && link.length > 0) {
			if (link.toLowerCase().startsWith('http')) {
				window.open(link);
			} else {
				window.open('http://'+link);
			}
		}
	}
}

/**
 * init view mode.
 * @param {*} graph 
 * @param {*} node the root xml node
 */
function init_graph_view_mode(graph, node) {
	//graph.resizeContainer = true;
    graph.setHtmlLabels(true);
    graph.setEnabled(false);

	graph.getCursorForCell = function(cell) {
		if (cell) {
			var category = cell.getAttribute('category');
			var link = cell.getAttribute('link');
			if(category && category.length > 0) {
				return 'pointer';
			} else if(link && link.length > 0) {
				return 'pointer';
			}
		}
		return null;
 	}

	graph.click = function(me) {
		//do nothing, put logic to dblClick
		//var evt = me.getEvent();
		//var cell = me.getCell();
	}
    /**
     * set the dblClick on the graph, then call 
     */
    graph.dblClick = function (evt, cell) {
		if (cell != null && (cell.isVertex() || cell.isEdge())) {
            cell_dblClick(cell); //function is defined in OneIT_Extends.js
        } 
    }

    graph.convertValueToString = function(cell) { 
        if (cell == null || cell.value == null) {
            return '';
        }
        if (mxUtils.isNode(cell.value)) {
  	        return cell.getAttribute('label') || '';
        } else {
            return cell.value || '';
        }
    }

	graph.gridEnabled = false;// node.getAttribute('grid') != '0';
	graph.gridSize = parseFloat(node.getAttribute('gridSize')) || mxGraph.prototype.gridSize;
	graph.graphHandler.guidesEnabled = false;//node.getAttribute('guides') != '0';
	graph.setTooltips(false); //node.getAttribute('tooltips') != '0'
	graph.setConnectable(false); //node.getAttribute('connect') != '0'
	graph.connectionArrowsEnabled = false;//node.getAttribute('arrows') != '0';
	graph.foldingEnabled = false;//node.getAttribute('fold') != '0';
	graph.pageVisible = false;//node.getAttribute('page') != '0';
	//graph.setPanning(true);
	
	var bg = node.getAttribute('background');
	if (bg != null && bg.length > 0 && bg != 'none') {
		graph.background = bg;
	} else {
		graph.background = graph.defaultGraphBackground;
	}
	graph.view.validateBackground(); 
	graph.container.style.backgroundColor = graph.background;
}
/**
 * 
 * @param {*} graph 
 * @param {*} node 
 */
function set_graph_background(graph, node) { 
	var bgImg = node.getAttribute('backgroundImage');
	if (bgImg != null && bgImg.length > 0) {
		bgImg = JSON.parse(bgImg);
		console.info(`backgroundImage src=${bgImg.src} width=${bgImg.width} height=${bgImg.height}`);
		graph.setBackgroundImage(new mxImage(bgImg.src, bgImg.width, bgImg.height));
		graph.view.validateBackgroundImage();

		//graph.container.style.backgroundImage=`url(${bgImg.src})`;
		//graph.container.style.backgroundRepeat="no-repeat";
		//graph.container.style.backgroundSize="100%";
	} else {
		graph.setBackgroundImage(null);
	}
	graph.view.validate();
}

/**
 * 
 * @param {*} graph 
 * @param {*} margin 
 * @param {*} maxScale
 */
function set_graph_center(graph, margin, maxScale) {
/*	margin = margin || 10;
	maxScale = maxScale || 1.2;
	var bounds = graph.getGraphBounds();
	var cw = graph.container.clientWidth - margin;
	var ch = graph.container.clientHeight - margin;
	var w = bounds.width / graph.view.scale;
	var h = bounds.height / graph.view.scale;
	var s = Math.min(maxScale, Math.min(cw/w, ch/h));
	
	graph.view.scaleAndTranslate(s, 
		(margin + cw - w * s ) / (2 * s) - bounds.x / graph.view.scale,
		(margin + ch - h * s ) / (2 * s) - bounds.y / graph.view.scale);
*/
		graph.fit();
		graph.center(true,true);
		graph.view.rendering = true;
		graph.refresh();
		console.info('current scale '+graph.getView().scale);
}
/**
 * Add ZoomIn(+) and ZoomOut(-) button on the top left of the graph container.
 * @param {*} graph 
 */
function addZoomButtons(graph) {
	var container = graph.container;
	// Adds zoom buttons in top, left corner
    var buttons = document.createElement('div');
    buttons.style.position = 'absolute';
    buttons.style.overflow = 'visible';

    var bs = graph.getBorderSizes();
    buttons.style.top = (container.offsetTop + bs.y) + 'px';
    buttons.style.left = (container.offsetLeft + bs.x) + 'px';
    
	var top = 4;
    var left = 4;
    var bw = 30;
    var bh = 30;
    
    if (mxClient.IS_QUIRKS){
        bw -= 1;
        bh -= 1;
    }
    
    function addButton(label, funct) {
        var btn = document.createElement('div');
        mxUtils.write(btn, label);
        btn.style.position = 'absolute';
        btn.style.backgroundColor = 'rgba(200,200,200,.5)';
        btn.style.border = '5px';
        btn.style.textAlign = 'center';
        btn.style.fontSize = '22px';
        btn.style.cursor = 'pointer';
        btn.style.width = bw + 'px';
        btn.style.height = bh + 'px';
        btn.style.left = left + 'px';
        btn.style.top = top + 'px';
        
        mxEvent.addListener(btn, 'click', function(evt)  {
            funct();
            mxEvent.consume(evt);
        });
        
        //left += bw;  
		top += bh;   
        buttons.appendChild(btn);
    };
	
	graph.zoomFactor = 1.02;
    addButton('+', function(){
        graph.zoom(1.02, true);
        console.info('zoomIn '+graph.getView().scale);
    });
    addButton('-', function() {
        graph.zoomOut(1.0/1.02, true);
        console.info('zoomOut '+graph.getView().scale);
	});
	addButton('*', function() {
		//graph.zoomActual();
		graph.fit();
		//for (var i=0;i<10;i++) {
			graph.center(true,true);
		//}
    });
    
    if (container.nextSibling != null){
        container.parentNode.insertBefore(buttons, container.nextSibling);
    } else {
        container.appendChild(buttons);
    }
}

/**
 * @author shilz.
 * 
 * Open a EditData window for cell, this needs the 'myExtend' be defined first.
 * 
 */
var EditDataDialog = function(ui, cell){
	var div = document.createElement('div');
	mxUtils.write(div, mxResources.get('editData') + ':');
	div.style.height = '310px';
	div.style.overflow = 'auto';
	
	var graph = ui.editor.graph;
	var cellValue = graph.getModel().getValue(cell);
	
	// Converts the value to an XML node
	if (!mxUtils.isNode(cellValue)) {
		var doc = mxUtils.createXmlDocument();
		var obj = doc.createElement('object');
		obj.setAttribute('label', cellValue || '');
		cellValue = obj;
	}

	var attrs = cellValue.attributes;

	var cancelBtn = mxUtils.button(mxResources.get('cancel'), function(){
		ui.hideDialog.apply(ui, arguments);
	});
	cancelBtn.className = 'geBtn';
	
	var applyBtn = mxUtils.button(mxResources.get('apply'), function(){
		try {
			cellValue = cellValue.cloneNode(true);
			
			//get all attribute names
			var allAttributeNames = myExtend.getCellAttributeNames();
			//get all names and values from edit page.
			var results = myExtend.getResult();
			
			//remove all old attribute
			allAttributeNames.forEach(function(e, index, attr)  {
				cellValue.removeAttribute(e);
			});
			
			//set new attribute name and values.
			results.forEach(function(e, index, attr) {
				cellValue.setAttribute(e.name, e.value);
			});
			
			graph.getModel().setValue(cell, cellValue);
		} catch (e){
			mxUtils.alert(e);
		}
		
		ui.hideDialog.apply(ui, arguments);
	});
	
	applyBtn.className = 'geBtn gePrimaryBtn';
	
	var buttons = document.createElement('div');
	buttons.style.marginTop = '18px';
	buttons.style.textAlign = 'right';
	
	if (ui.editor.cancelFirst) {
		buttons.appendChild(cancelBtn);
		buttons.appendChild(applyBtn);
	} else {
		buttons.appendChild(applyBtn);
		buttons.appendChild(cancelBtn);
	}

	//the order of below is quite import, dont change
	// so far all the element are on fly
	myExtend.init();	
	div.appendChild(myExtend.getMyForm());
	div.appendChild(buttons);

	// this will be called outside after display this dialog
	// once display, the dialog will be attached to document
	this.init = function() { 
		//this code must be inside here.
		myExtend.setAttributes(cellValue);
	}
	
	this.container = div;
};

/**
 * To Refresh Graph in view mode.
 */
function refresh_graph(graph, queryUrl) {
	if (graph == null || graph == undefined) {
		return;
	}
	//select all cells including vertexs and edges.
	var cells = graph.getModel().getDescendants(null);
	if (cells == null || cells == undefined || cells.length == 0) {
		return;
	}
	var cellAttrs = [];
	
	var myExtend = new OneIT_Extends('', '');
	
	cells.forEach(function(cell) {
		if (mxUtils.isNode(cell.value)) {
			var attributes = cell.value;
			if (attributes.hasAttribute('category') 
				&& attributes.getAttribute('category') != ''
				&& attributes.getAttribute('category') != 'undefined') {
				var cellAttr = { };
				cellAttr.id = cell.id;
				
				myExtend.getCellAttributeNames().forEach(function(attrName) {
					if (attributes.hasAttribute(attrName)) {
						var attrValue = attributes.getAttribute(attrName);
						cellAttr[attrName] = attrValue || '';
					}
				});
				cellAttrs.push(cellAttr);
			}
		}
	});
	if (cellAttrs.length == 0) {
		return;
	}
	
	$.ajax({
		type : 'POST',
		url  : queryUrl,
		data : {
			cellAttrs : myExtend.stringify(cellAttrs)
		},
		async: true,
		error: function(request) { },
		success : function (data) {
			if (data== null || data == undefined || data.length == 0) {
				return;
			}
			var jsonResponse = myExtend.parseJSON(data);
			if (jsonResponse == null || jsonResponse == undefined || jsonResponse.length == 0) {
				return;
			}
			try {
				jsonResponse.forEach( function(cellResponse) {
					var cellId       = cellResponse.id || '';					
					var cellCategory = cellResponse.category || '';
					var cellMetricCategory = cellResponse.metricCategory || '';
					var cellLabel    = cellResponse.label || '';
					var cellState    = cellResponse.state || ''; 
					
					var cell = graph.getModel().getCell(cellId);

					console.info("cellId="+cellId+", cellCategory="+cellCategory+", cellMetricCategory="+cellMetricCategory
						+", cellLabel="+cellLabel+",cellState="+cellState);

					if (cell != null && mxUtils.isNode(cell.value)) {
						graph_process_cell(graph, cell, cellCategory, cellMetricCategory, cellState, cellLabel);
					}
				});
			} finally { }			
		}
	});
}
/**
 * a map object from states to color.
 * 
    String ResourceAvailRed = "1910";
    String ResourcePerfRedConfChg = "1810";
    String ResourcePerfRed = "1710";
    String ResourcePerfYelConfChg = "1610";
    String ResourcePerfYel = "1510";
    String ResourcePerfUnkConfChg = "1410";
    String ResourcePerfGray = "1310";
    String ResourceGray = "1210";
    String ResourceConfChg = "1110";
    String ResourceGreen = "1010";
 */
var color_red = {fillColor:"#E7505A", strokeColor :"#ffffff", strokeWidth:"2", gradientColor:null, gradientDirection:null};
var color_yellow = {fillColor:"#F7CA18", strokeColor :"#ffffff", strokeWidth:"2", gradientColor:null, gradientDirection:null};
var color_green = {fillColor:"#32C5D2", strokeColor :"#ffffff", strokeWidth:"2", gradientColor:null, gradientDirection:null};
var color_unknown = {fillColor:"#BFBFBF", strokeColor :"#ffffff", strokeWidth:"2", gradientColor:null, gradientDirection:null};
var color_gray = {fillColor:"#525E64", strokeColor :"#ffffff", strokeWidth:"2", gradientColor:null, gradientDirection:null};

var state_2_color = {
	'NotExist'    : color_unknown,
	'NotMonitor'  : color_unknown,

	'resource_instance.1910'  : color_red,
	'resource_instance.1810'  : {fillColor:"#4B77BE", strokeColor :"#ffffff", strokeWidth:"2", gradientColor:"#E7505A", gradientDirection:"east"},
	'resource_instance.1710'  : {fillColor:"#32C5D2", strokeColor :"#ffffff", strokeWidth:"2", gradientColor:"#E7505A", gradientDirection:"east"},
	'resource_instance.1610'  : {fillColor:"#4B77BE", strokeColor :"#ffffff", strokeWidth:"2", gradientColor:"#F7CA18", gradientDirection:"east"},
	'resource_instance.1510'  : {fillColor:"#32C5D2", strokeColor :"#ffffff", strokeWidth:"2", gradientColor:"#F7CA18", gradientDirection:"east"},
	'resource_instance.1410'  : {fillColor:"#4B77BE", strokeColor :"#ffffff", strokeWidth:"2", gradientColor:"#525E64", gradientDirection:"east"},
	'resource_instance.1310'  : {fillColor:"#32C5D2", strokeColor :"#ffffff", strokeWidth:"2", gradientColor:"#525E64", gradientDirection:"east"},
	'resource_instance.1210'  : color_gray,
	'resource_instance.1110'  : {fillColor:"#4B77BE", strokeColor :"#ffffff", strokeWidth:"2", gradientColor:null, gradientDirection:null},
	'resource_instance.1010'  : color_green,

	'resource_instance_metric.Availability.-1' :color_red,
	'resource_instance_metric.Availability.0'  :color_gray,
	'resource_instance_metric.Availability.1'  :color_green,

	'resource_instance_metric.Performance.-2'  :color_red,
	'resource_instance_metric.Performance.-1'  :color_yellow,
	'resource_instance_metric.Performance.0'   :color_gray,
	'resource_instance_metric.Performance.1'   :color_green,

	'resource_instance_metric.Configuration.-4' :{fillColor:"#4B77BE", strokeColor :"#ffffff", strokeWidth:"2", gradientColor:null, gradientDirection:null},
	'resource_instance_metric.Configuration.0'  :color_gray,
	'resource_instance_metric.Configuration.1'  :color_gray,

	'netflow.Red'     : color_red,
	'netflow.Yellow'  : color_yellow,
	'netflow.Green'   : color_green,

	'log.Red'     : color_red,
	'log.Yellow'  : color_yellow,
	'log.Green'   : color_green
}

/**
 * Set the cell style by given
 * @param {*} graph 
 * @param {*} cell 
 * @param {*} cellCategory  resource_instance, resource_instance_metric, netflow, log
 * @param {*} cellMetricCategory  if this is a metric
 * @param {*} cellState //NotExist, NotMonitor, ....
 * @param {*} cellLabel 
 */
function graph_process_cell(graph, cell, cellCategory, cellMetricCategory, cellState, cellLabel) {
	if (cellLabel.length > 0) {
		console.info("cellLabelChanged cellLabel="+cellLabel);
		graph.cellLabelChanged(cell, cellLabel);
	}
	var key = '';
	if (cellState == 'NotExist' || cellState == 'NotMonitor') {
		key = cellState
	}  else {
		if (cellCategory == 'resource_instance' || cellCategory == 'netflow' || cellCategory == 'log') {
			key = (cellCategory + '.' + cellState)
		} else if (cellCategory == 'resource_instance_metric') {
			key = (cellCategory + '.' + cellMetricCategory + '.' + cellState)
		}
	} 
	var colorValue = state_2_color[key] || state_2_color['NotExist'];
	console.info('cellStyle colorValue='+JSON.stringify(colorValue));

	if (cell.isVertex()) {
		graph.setCellStyles('fillColor', colorValue['fillColor'], [ cell ]);
		graph.setCellStyles('strokeColor', colorValue['strokeColor'], [ cell ]);
		graph.setCellStyles('strokeWidth', colorValue['strokeWidth'], [ cell ]);
		graph.setCellStyles('gradientDirection', colorValue['gradientDirection'], [ cell ]);
		graph.setCellStyles('gradientColor', colorValue['gradientColor'], [ cell ]);
	} else if (cell.isEdge()) {
		graph.setCellStyles('strokeColor', colorValue['gradientColor'] || colorValue['fillColor'], [ cell ]);
		var state = graph.view.getState(cell);
		if (state != null) {
			var second_path = state.shape.node.getElementsByTagName('path')[1];
			
			var dynamic = !(key === 'NotExist' || key === 'NotMonitor' || key === 'resource_instance.1910' 
				|| key === 'resource_instance.1210' ||  key === 'resource_instance_metric.Availability.-1');
			console.info(`key=${key} dynamic=${dynamic}`);
			if (dynamic) {
				second_path && second_path.setAttribute('class', 'flow');
			} else {
				second_path && second_path.removeAttribute('class', 'flow');
			}
		}
	}
}